{"ast":null,"code":"var API_URL = \"http://127.0.0.1:4000\";\nvar SIGN_IN = \"mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}\";\nvar SIGN_UP = \"mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}\";\nvar GET_TODO_LISTS = \"query($username:String!) {tasks(where:{owner:{username :$username} }) {id title done}}\";\nvar ADD_TODO_LIST = \"mutation($title: String!, $username: String!) {createTasks(input: {title: $title, done:false, owner: { connect: { where: { username: $username } } } }) {tasks { id title}}} \";\nvar DELETE_TODO = \"mutation($id: ID!){deleteTasks(where: {id: $id}){nodesDeleted}}\";\nvar UPDATE_TODO = \"mutation($id: ID!, $done: Boolean!){updateTasks(where: {id: $id}, update: {done: $done}){tasks {id title done}}}\";\nvar GET_USERS = \"query {users {id username}}\";\nvar DELETE_USER = \"mutation($id: ID!){deleteUsers(where: {id: $id}){nodesDeleted}}\";\nexport function signIn(username, password) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: SIGN_IN,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.signIn;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function signUp(username, password) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: SIGN_UP,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.signUp;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getTodoLists(username, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: GET_TODO_LISTS,\n      variables: {\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.tasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function addTodoList(title, username, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: ADD_TODO_LIST,\n      variables: {\n        title: title,\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.createTasks.tasks[0];\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function deleteTodoList(id, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: DELETE_TODO,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function updateTodoList(id, done, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: UPDATE_TODO,\n      variables: {\n        id: id,\n        done: done\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.updateTasks.tasks[0];\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getUsers(token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: GET_USERS\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.users;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function deleteUser(id, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      query: DELETE_USER,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data;\n  }).catch(function (error) {\n    throw error;\n  });\n}","map":{"version":3,"names":["API_URL","SIGN_IN","SIGN_UP","GET_TODO_LISTS","ADD_TODO_LIST","DELETE_TODO","UPDATE_TODO","GET_USERS","DELETE_USER","signIn","username","password","fetch","method","headers","body","JSON","stringify","query","variables","then","response","json","jsonResponse","errors","data","catch","error","signUp","getTodoLists","token","Authorization","tasks","addTodoList","title","createTasks","deleteTodoList","id","updateTodoList","done","updateTasks","getUsers","users","deleteUser"],"sources":["/Users/antoninmontagne/Desktop/Info/L3/S5/AppClient/tp1/API/todoAPI.js"],"sourcesContent":["const API_URL = \"http://127.0.0.1:4000\";\n//const API_URL = 'http://192.168.249.188:4000'\nconst SIGN_IN =\n  \"mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}\";\n\nconst SIGN_UP =\n  \"mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}\";\n\nconst GET_TODO_LISTS =\n  \"query($username:String!) {tasks(where:{owner:{username :$username} }) {id title done}}\";\n  \nconst ADD_TODO_LIST =\n  \"mutation($title: String!, $username: String!) {createTasks(input: {title: $title, done:false, owner: { connect: { where: { username: $username } } } }) {tasks { id title}}} \"\n\nconst DELETE_TODO =\n  \"mutation($id: ID!){deleteTasks(where: {id: $id}){nodesDeleted}}\";\n\nconst UPDATE_TODO =\n  \"mutation($id: ID!, $done: Boolean!){updateTasks(where: {id: $id}, update: {done: $done}){tasks {id title done}}}\";\n\n  const GET_USERS =\n  \"query {users {id username}}\";\n\n  const DELETE_USER =\n  \"mutation($id: ID!){deleteUsers(where: {id: $id}){nodesDeleted}}\";\n\nexport function signIn(username, password) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: SIGN_IN,\n      variables: {\n        username: username,\n        password: password,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.signIn;\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function signUp(username, password) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: SIGN_UP,\n      variables: {\n        username: username,\n        password: password,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.signUp;\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function getTodoLists(username, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n    body: JSON.stringify({\n      query: GET_TODO_LISTS,\n      variables: {\n        username: username,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.tasks;\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function addTodoList(title, username, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n    body: JSON.stringify({\n      query: ADD_TODO_LIST,\n      variables: {\n        title: title,\n        username: username,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.createTasks.tasks[0];\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function deleteTodoList(id, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n    body: JSON.stringify({\n      query: DELETE_TODO,\n      variables: {\n        id: id,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data;\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function updateTodoList(id, done, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n    body: JSON.stringify({\n      query: UPDATE_TODO,\n      variables: {\n        id: id,\n        done: done,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.updateTasks.tasks[0];\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function getUsers(token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n    body: JSON.stringify({\n      query: GET_USERS,\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.users;\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n\nexport function deleteUser(id, token) {\n  return fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n    body: JSON.stringify({\n      query: DELETE_USER,\n      variables: {\n        id: id,\n      },\n    }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((jsonResponse) => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data;\n    })\n    .catch((error) => {\n      throw error;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}