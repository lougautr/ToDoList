{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Constants from 'expo-constants';\nexport default function ProgressBar(props) {\n  var counter = useRef(new Animated.Value(0)).current;\n  var countInterval = useRef(null);\n  useEffect(function () {\n    countInterval.current = props.count / props.total;\n  }, []);\n  useEffect(function () {\n    load(props.count / props.total);\n    if (count >= 100) {\n      setCount(100);\n      clearInterval(countInterval);\n    }\n  }, [count]);\n  var load = function load(value) {\n    Animated.timing(counter, {\n      toValue: value,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n  var width = counter.interpolate({\n    inputRange: [0, 100],\n    outputRange: [\"0%\", \"100%\"],\n    extrapolate: \"clamp\"\n  });\n  console.log(props.total);\n  return React.createElement(View, {\n    style: styles.progressBar\n  }, React.createElement(Animated.View, {\n    style: _objectSpread(_objectSpread({}, StyleSheet.absoluteFill), {}, {\n      backgroundColor: \"#46FF33\",\n      width: width\n    })\n  }));\n}\nvar styles = StyleSheet.create({\n  progressBar: {\n    width: '80%',\n    height: 40,\n    backgroundColor: '#fff',\n    borderWidth: 3,\n    borderRadius: 8,\n    borderColor: '#555',\n    flexDirection: \"row\"\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","useRef","Constants","ProgressBar","props","counter","Animated","Value","current","countInterval","count","total","load","setCount","clearInterval","value","timing","toValue","duration","useNativeDriver","start","width","interpolate","inputRange","outputRange","extrapolate","console","log","styles","progressBar","StyleSheet","absoluteFill","backgroundColor","create","height","borderWidth","borderRadius","borderColor","flexDirection"],"sources":["/Users/antoninmontagne/Desktop/Info/L3/S5/AppClient/tp1/components/ProgressBar.js"],"sourcesContent":["import { Animated, StyleSheet, Text, View } from 'react-native';\nimport React, { useEffect, useState, useRef } from 'react';\nimport Constants from 'expo-constants';\nexport default function ProgressBar(props) {\n  const counter = useRef(new Animated.Value(0)).current;\n  const countInterval = useRef(null);\n  // EFFECT HOOK TO SETUP AND CLEAN INTERvAL COUNTER\n  useEffect(() => {\n    // SETUP INTERVAL COUNTER TO REFERENCED HOOK\n    countInterval.current = props.count/props.total;\n  }, []);\n  // EFFECT HOOK TO TRACK CHANGES IN PROGRESS\n  useEffect(() => {\n    // TRIGGER VIEW UPDATE\n    load(props.count/props.total);\n    if (count >= 100) {\n      setCount(100);\n      // CLEAR\n      clearInterval(countInterval);\n    }\n  }, [count]);\n  // FUNCTION TO ANIMATE VIEW\n  const load = (value) => {\n    // UPDATE ANIMATABLE VIEW\n    Animated.timing(counter, {\n      toValue: value,\n      duration: 1000,\n      useNativeDriver: false,\n    }).start();\n  };\n  const width = counter.interpolate({\n    inputRange: [0, 100],\n    outputRange: [\"0%\", \"100%\"],\n    extrapolate: \"clamp\"\n  })\n\n  console.log(props.total)\n\n  return (\n      <View style={styles.progressBar}>\n        <Animated.View style={{ ...StyleSheet.absoluteFill, backgroundColor: \"#46FF33\", width: width }}/>\n      </View>\n    \n  );\n}\nconst styles = StyleSheet.create({\n  progressBar: {\n   width: '80%',\n   height: 40,\n   backgroundColor: '#fff',\n   borderWidth: 3,\n   borderRadius: 8,\n   borderColor: '#555',\n   flexDirection:\"row\"\n }\n});\n"],"mappings":";;;;;;;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,gBAAgB;AACtC,eAAe,SAASC,WAAW,CAACC,KAAK,EAAE;EACzC,IAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAIK,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EACrD,IAAMC,aAAa,GAAGR,MAAM,CAAC,IAAI,CAAC;EAElCF,SAAS,CAAC,YAAM;IAEdU,aAAa,CAACD,OAAO,GAAGJ,KAAK,CAACM,KAAK,GAACN,KAAK,CAACO,KAAK;EACjD,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,YAAM;IAEda,IAAI,CAACR,KAAK,CAACM,KAAK,GAACN,KAAK,CAACO,KAAK,CAAC;IAC7B,IAAID,KAAK,IAAI,GAAG,EAAE;MAChBG,QAAQ,CAAC,GAAG,CAAC;MAEbC,aAAa,CAACL,aAAa,CAAC;IAC9B;EACF,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC;EAEX,IAAME,IAAI,GAAG,SAAPA,IAAI,CAAIG,KAAK,EAAK;IAEtBT,QAAQ,CAACU,MAAM,CAACX,OAAO,EAAE;MACvBY,OAAO,EAAEF,KAAK;MACdG,QAAQ,EAAE,IAAI;MACdC,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,EAAE;EACZ,CAAC;EACD,IAAMC,KAAK,GAAGhB,OAAO,CAACiB,WAAW,CAAC;IAChCC,UAAU,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;IACpBC,WAAW,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;IAC3BC,WAAW,EAAE;EACf,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAACvB,KAAK,CAACO,KAAK,CAAC;EAExB,OACI,oBAAC,IAAI;IAAC,KAAK,EAAEiB,MAAM,CAACC;EAAY,GAC9B,oBAAC,QAAQ,CAAC,IAAI;IAAC,KAAK,kCAAOC,UAAU,CAACC,YAAY;MAAEC,eAAe,EAAE,SAAS;MAAEX,KAAK,EAAEA;IAAK;EAAG,EAAE,CAC5F;AAGb;AACA,IAAMO,MAAM,GAAGE,UAAU,CAACG,MAAM,CAAC;EAC/BJ,WAAW,EAAE;IACZR,KAAK,EAAE,KAAK;IACZa,MAAM,EAAE,EAAE;IACVF,eAAe,EAAE,MAAM;IACvBG,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IACfC,WAAW,EAAE,MAAM;IACnBC,aAAa,EAAC;EAChB;AACD,CAAC,CAAC"},"metadata":{},"sourceType":"module"}